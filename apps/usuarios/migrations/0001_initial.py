# Generated by Django 4.2.15 on 2024-10-02 00:46

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='TipoPerfil',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(blank=True, db_column='nombre', max_length=30, null=True, verbose_name='Nombre')),
                ('descripcion', models.TextField(blank=True, db_column='descripcion', null=True, verbose_name='Descripción')),
            ],
            options={
                'verbose_name': 'Tipo de perfil',
                'verbose_name_plural': 'Tipo de perfiles',
                'db_table': 'tipo_perfiles',
            },
        ),
        migrations.CreateModel(
            name='Perfil',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nombre', models.CharField(blank=True, db_column='nombre', max_length=30, null=True, verbose_name='Nombre')),
                ('apellido', models.CharField(blank=True, db_column='apellido', max_length=30, null=True, verbose_name='Apellido')),
                ('colegiado', models.IntegerField(blank=True, db_column='colegiado', null=True, verbose_name='Colegiado')),
                ('direccion', models.CharField(blank=True, db_column='direccion', max_length=30, null=True, verbose_name='Dirección')),
                ('fechanac', models.DateField(blank=True, db_column='fechanac', null=True, verbose_name='Fecha de nacimiento')),
                ('genero', models.CharField(blank=True, choices=[('M', 'Masculino'), ('F', 'Femenino'), ('O', 'Otro')], db_column='genero', max_length=1, null=True, verbose_name='Género')),
                ('telefono', models.CharField(blank=True, db_column='telefono', max_length=15, null=True, verbose_name='Teléfono')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('tipo_perfil', models.ForeignKey(blank=True, db_column='tipo_perfil_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='usuarios.tipoperfil', verbose_name='Tipo de perfil')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Perfil',
                'verbose_name_plural': 'Perfiles',
                'db_table': 'perfiles',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
